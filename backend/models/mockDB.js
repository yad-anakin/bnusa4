/**
 * Mock Database Service for Development
 * This provides in-memory storage when MongoDB Atlas connection fails
 */

class MockDB {
  constructor() {
    this.users = [];
    this.articles = [];
    this.nextUserId = 1;
    this.nextArticleId = 1;
    
    // Add some sample data
    this.addSampleData();
    
    console.log('ðŸ”§ MockDB initialized with sample data');
  }
  
  addSampleData() {
    // Add sample users
    this.users.push({
      _id: this.nextUserId++,
      name: 'Ø¦Ø§Ú©Û† Ù…Ø­Û•Ù…Û•Ø¯',
      username: 'ako_m',
      email: 'ako.m@example.com',
      bio: 'Ù†ÙˆÙˆØ³Û•Ø± Ùˆ Ú•Û†Ú˜Ù†Ø§Ù…Û•Ù†ÙˆÙˆØ³ Ù„Û• Ø¨ÙˆØ§Ø±ÛŒ ØªÛ•Ú©Ù†Û•Ù„Û†Ú˜ÛŒØ§ Ùˆ Ø²Ø§Ù†Ø³Øª. Ø®ÙˆÛŽÙ†Ø¯Ú©Ø§Ø±ÛŒ Ø¯Ú©ØªÛ†Ø±Ø§ Ù„Û• Ø²Ø§Ù†Ú©Û†ÛŒ Ø³Ù„ÛŽÙ…Ø§Ù†ÛŒ.',
      profileImage: '/images/placeholders/avatar-am-primary.png',
      bannerImage: '/images/placeholders/profile-banner.jpg',
      joinDate: new Date('2023-12-01'),
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    this.users.push({
      _id: this.nextUserId++,
      name: 'Ø´Ø§Ø¯ÛŒ Ø¹Û•Ø²ÛŒØ²',
      username: 'shady_a',
      email: 'shady.a@example.com',
      bio: 'Ù†ÙˆÙˆØ³Û•Ø± Ùˆ Ú•Û†Ú˜Ù†Ø§Ù…Û•Ù†ÙˆÙˆØ³ Ù„Û• Ø¨ÙˆØ§Ø±ÛŒ Ù‡ÙˆÙ†Û•Ø± Ùˆ Ø¦Û•Ø¯Û•Ø¨ÛŒØ§Øª.',
      profileImage: '/images/placeholders/avatar-sa-primary.png',
      bannerImage: '/images/placeholders/profile-banner.jpg',
      joinDate: new Date('2024-01-15'),
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    // Add sample articles
    this.articles.push({
      _id: this.nextArticleId++,
      title: 'Ú©Ø§Ø±ÛŒÚ¯Û•Ø±ÛŒ Ø²ÛŒØ±Û•Ú©ÛŒ Ø¯Û•Ø³ØªÚ©Ø±Ø¯ Ù„Û•Ø³Û•Ø± Ø¯Ø§Ù‡Ø§ØªÙˆÙˆÛŒ Ù…Ø±Û†Ú¤Ø§ÛŒÛ•ØªÛŒ',
      description: 'Ù„Û•Ù… ÙˆØªØ§Ø±Û•Ø¯Ø§ Ø¨Ø§Ø³ Ù„Û• Ú¯Ø±Ù†Ú¯ØªØ±ÛŒÙ† Ú¯Û†Ú•Ø§Ù†Ú©Ø§Ø±ÛŒÛŒÛ•Ú©Ø§Ù†ÛŒ Ø²ÛŒØ±Û•Ú©ÛŒ Ø¯Û•Ø³ØªÚ©Ø±Ø¯ Ùˆ Ú©Ø§Ø±ÛŒÚ¯Û•Ø±ÛŒÛŒÛ•Ú©Ø§Ù†ÛŒ Ù„Û•Ø³Û•Ø± Ú˜ÛŒØ§Ù†ÛŒ Ù…Ø±Û†Ú¤ Ø¯Û•Ú©Û•ÛŒÙ†...',
      content: 'Ù„Û•Ù… ÙˆØªØ§Ø±Û•Ø¯Ø§ Ø¨Ø§Ø³ Ù„Û• Ú¯Ø±Ù†Ú¯ØªØ±ÛŒÙ† Ú¯Û†Ú•Ø§Ù†Ú©Ø§Ø±ÛŒÛŒÛ•Ú©Ø§Ù†ÛŒ Ø²ÛŒØ±Û•Ú©ÛŒ Ø¯Û•Ø³ØªÚ©Ø±Ø¯ Ùˆ Ú©Ø§Ø±ÛŒÚ¯Û•Ø±ÛŒÛŒÛ•Ú©Ø§Ù†ÛŒ Ù„Û•Ø³Û•Ø± Ú˜ÛŒØ§Ù†ÛŒ Ù…Ø±Û†Ú¤ Ø¯Û•Ú©Û•ÛŒÙ†... Ø¦Û•Ù… ØªÛ•Ú©Ù†Û•Ù„Û†Ú˜ÛŒØ§ÛŒÛ• Ø¯Û•ØªÙˆØ§Ù†ÛŽØª Ú˜ÛŒØ§Ù†ÛŒ Ù…Ø±Û†Ú¤Û•Ú©Ø§Ù† Ø¨Û• Ø´ÛŽÙˆÛ•ÛŒÛ•Ú©ÛŒ Ø¨Ù†Û•Ú•Û•ØªÛŒ Ø¨Ú¯Û†Ú•ÛŽØª Ø¨Û• Ø¨Ø§Ø´ØªØ± ÛŒØ§Ø®ÙˆØ¯ Ø¨Û• Ø®Ø±Ø§Ù¾ØªØ±ØŒ Ø¦Û•Ù…Û• Ø¨Û•Ø³ØªØ±Ø§ÙˆÛ•ØªÛ•ÙˆÛ• Ø¨Û• Ú†Û†Ù†ÛŒÛ•ØªÛŒ Ø¨Û•Ú©Ø§Ø±Ù‡ÛŽÙ†Ø§Ù†ÛŒ.',
      author: 1,
      coverImage: '/images/placeholders/article-1.jpg',
      categories: ['Ø²Ø§Ù†Ø³Øª', 'ØªÛ•Ú©Ù†Û•Ù„Û†Ú˜ÛŒØ§'],
      status: 'published',
      likes: [],
      comments: [],
      views: 45,
      readTime: 7,
      createdAt: new Date('2024-02-15'),
      updatedAt: new Date('2024-02-15')
    });
    
    this.articles.push({
      _id: this.nextArticleId++,
      title: 'Ú¯Û•Ø´ØªÛŽÚ© Ø¨Û• Ù…ÛŽÚ˜ÙˆÙˆÛŒ Ú©ÙˆØ±Ø¯Ø³ØªØ§Ù†Ø¯Ø§',
      description: 'Ú¯Û•Ø´ØªÛŽÚ©ÛŒ Ù…ÛŽÚ˜ÙˆÙˆÛŒÛŒ Ø¨Û• Ø´Ø§Ø±Û• Ú©Û†Ù†Û•Ú©Ø§Ù†ÛŒ Ú©ÙˆØ±Ø¯Ø³ØªØ§Ù†Ø¯Ø§ØŒ Ù„Û• Ø¦Ø§Ù…Ø§Ú˜Û• Ø¨Û• Ú¯Ø±Ù†Ú¯ØªØ±ÛŒÙ† Ú•ÙˆÙˆØ¯Ø§ÙˆÛ• Ù…ÛŽÚ˜ÙˆÙˆÛŒÛŒÛ•Ú©Ø§Ù†...',
      content: 'Ú¯Û•Ø´ØªÛŽÚ©ÛŒ Ù…ÛŽÚ˜ÙˆÙˆÛŒÛŒ Ø¨Û• Ø´Ø§Ø±Û• Ú©Û†Ù†Û•Ú©Ø§Ù†ÛŒ Ú©ÙˆØ±Ø¯Ø³ØªØ§Ù†Ø¯Ø§ØŒ Ù„Û• Ø¦Ø§Ù…Ø§Ú˜Û• Ø¨Û• Ú¯Ø±Ù†Ú¯ØªØ±ÛŒÙ† Ú•ÙˆÙˆØ¯Ø§ÙˆÛ• Ù…ÛŽÚ˜ÙˆÙˆÛŒÛŒÛ•Ú©Ø§Ù†... Ú©ÙˆØ±Ø¯Ø³ØªØ§Ù† Ø®Ø§ÙˆÛ•Ù†ÛŒ Ù…ÛŽÚ˜ÙˆÙˆÛŒÛ•Ú©ÛŒ Ø¯Û•ÙˆÚµÛ•Ù…Û•Ù†Ø¯ Ùˆ Ú©Û•Ù„ØªÙˆÙˆØ±ÛŽÚ©ÛŒ Ø¨Û•Ù‡ÛŽØ²Û• Ú©Û• Ø´Ø§ÛŒØ§Ù†ÛŒ ØªÙˆÛŽÚ˜ÛŒÙ†Û•ÙˆÛ•ÛŒÛ•.',
      author: 2,
      coverImage: '/images/placeholders/article-2.jpg',
      categories: ['Ù…ÛŽÚ˜ÙˆÙˆ', 'Ú¯Û•Ø´ØªÛŒØ§Ø±ÛŒ'],
      status: 'published',
      likes: [1],
      comments: [],
      views: 67,
      readTime: 10,
      createdAt: new Date('2024-02-10'),
      updatedAt: new Date('2024-02-10')
    });
  }
  
  // User methods
  async findUserById(id) {
    return this.users.find(user => user._id === id) || null;
  }
  
  async findUserByUsername(username) {
    return this.users.find(user => user.username === username) || null;
  }
  
  async findUserByEmail(email) {
    return this.users.find(user => user.email === email) || null;
  }
  
  async createUser(userData) {
    const newUser = {
      _id: this.nextUserId++,
      ...userData,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    this.users.push(newUser);
    return newUser;
  }
  
  async countUsers() {
    return this.users.length;
  }
  
  // Article methods
  async findArticleById(id) {
    return this.articles.find(article => article._id === id) || null;
  }
  
  async findArticlesByAuthor(authorId) {
    return this.articles.filter(article => article.author === authorId);
  }
  
  async createArticle(articleData) {
    const newArticle = {
      _id: this.nextArticleId++,
      ...articleData,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    this.articles.push(newArticle);
    return newArticle;
  }
  
  async countArticles() {
    return this.articles.length;
  }
}

// Create a singleton instance
const mockDB = new MockDB();

module.exports = mockDB; 